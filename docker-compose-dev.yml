version: "3.8"

x-drf: &drf
  build:
    context: .
    dockerfile: ./docker/geo_backend/Dockerfile
  image: backend
  restart: always
  volumes:
    - ./geo_back/householder_gis/:/app/householder_gis/
    - static-volume:/app/static/
    - ./.env:/app/.env


services:
  drf:
    <<: *drf
    container_name: geo-backend
    command: gunicorn --bind 0.0.0.0:8000 --workers 2 householder_gis.wsgi:application --reload
    expose:
      - "8000"
    ports:
      - "8090:8000"
    extra_hosts:
      - "host.docker.internal:172.17.0.1"
    networks:
      - geo-network


  frontend:
    build:
      context: .
      dockerfile: ./docker/geo_frontend/Dockerfile
    image: frontend
    container_name: geo-frontend
    restart: always
    expose:
      - "3000"
    command: npm start
    environment:
      - CHOKIDAR_USEPOLLING=true
      - WDS_SOCKET_HOST=0.0.0.0
      - WDS_SOCKET_PORT=0
    volumes:
      - ./geo_front/src/:/app/src/
      - ./geo_front/node_modules/:/app/node_modules/
      - ./geo_front/build/:/app/build/
      - ./geo_front/public/:/app/public/
      - ./geo_front/package.json:/app/package.json
    networks:
      - geo-network
    depends_on:
      - drf


  drf-test:
    <<: *drf
    container_name: geo-backend-test
    profiles: ["test"]
    command: "pytest --no-cov"
    extra_hosts:
      - "host.docker.internal:172.17.0.1"
    networks:
      - geo-network


  nginx:
    image: nginx:latest
    container_name: geo-nginx
    ports:
      - "80:80"
    volumes:
      - ./deploy/nginx.conf:/etc/nginx/conf.d/default.conf
    depends_on:
      - drf
      - frontend
    networks:
      - geo-network


  nodeexporter:
    image: prom/node-exporter:v0.18.1
    container_name: geo-nodeexporter
    volumes:
      - /proc:/host/proc:ro
      - /sys:/host/sys:ro
      - /:/rootfs:ro
    command:
      - '--path.procfs=/host/proc'
      - '--path.rootfs=/rootfs'
      - '--path.sysfs=/host/sys'
      - '--collector.filesystem.ignored-mount-points=^/(sys|proc|dev|host|etc)($$|/)'
    restart: unless-stopped
    expose:
      - 9100
    networks:
      - geo-network
    labels:
      org.label-schema.group: "monitoring"


  prometheus:
    image: prom/prometheus:latest
    container_name: geo-prometheus
    volumes:
      - ./deploy/prometheus.yml:/etc/prometheus/prometheus.yml
    ports:
      - "9090:9090"
    command:
      - '--config.file=/etc/prometheus/prometheus.yml'
    networks:
      - geo-network


  grafana:
    image: grafana/grafana:7.5.3
    container_name: geo-grafana
    volumes:
      - grafana_data:/var/lib/grafana
    environment:
      - GF_SECURITY_ADMIN_USER=admin
      - GF_SECURITY_ADMIN_PASSWORD=admin
    ports:
      - "3000:3000"
    depends_on:
      - prometheus
      - frontend
    networks:
      - geo-network


  cadvisor:
    image: gcr.io/cadvisor/cadvisor
    container_name: geo-cadvisor
    volumes:
      - /:/rootfs:ro
      - /var/run:/var/run:rw
      - /sys:/sys:ro
      - /var/lib/docker:/var/lib/docker:ro
      - /cgroup:/cgroup:ro
    restart: unless-stopped
    expose:
      - 8080
    networks:
      - geo-network
    labels:
      org.label-schema.group: "monitoring"


volumes:
  static-volume:
  grafana_data:

networks:
  geo-network:
    name: geo-network
    driver: bridge
